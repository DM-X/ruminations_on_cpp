#include "handle.hpp"

//------------------------------------------------------------------------------ 
Handle::Handle(): u(new int(1)), p(new Point) { }
//------------------------------------------------------------------------------ 
Handle::Handle(int x, int y): u(new int(1)), p(new Point(x, y)) { }
//------------------------------------------------------------------------------ 
Handle::Handle(const Point& p): u(new int(1)), p(new Point(p)) { }
//------------------------------------------------------------------------------ 
Handle::Handle(const Handle& h): u(h.u), p(h.p)
{
   ++(*u);
}
//------------------------------------------------------------------------------ 
Handle& Handle::operator=(const Handle& h) 
{
   if (&h != this) {
      if (--(*u) == 0) {
         delete u;
         delete p;
      }
      u = h.u;
      p = h.p;
      ++(*u);
   }
   return *this;

   //or:

   //++(*h.u);
   //if (--(*u) == 0) {
   //   delete u;
   //   delete p;
   //}
   //u = h.u;
   //p = h.p;
   //return *this;
}
//------------------------------------------------------------------------------ 
Handle::~Handle()
{
   if(--(*u) == 0) {
      delete u;
      delete p;
   }
}
//------------------------------------------------------------------------------ 
int Handle::x() const
{
   return p->x();
}
//------------------------------------------------------------------------------ 
int Handle::y() const
{
   return p->y();
}
//------------------------------------------------------------------------------ 
Handle& Handle::x(int x0)
{
   if (*u != 1) { //multiple handles
      --(*u);
      u = new int(*u);
      *u = 1;
      p = new Point(*p);
   }

   p->x(x0);
   return *this;
}
//------------------------------------------------------------------------------ 
Handle& Handle::y(int y0)
{
   if (*u != 1) { //multiple handles
      --(*u);
      u = new int(*u);
      p = new Point(*p);
   }

   p->y(y0);
   return *this;
}
//------------------------------------------------------------------------------ 
